// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "pbcommon/pbcommon.proto" (package "pbcommon", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message pbcommon.CommonResult
 */
export interface CommonResult {
    /**
     * @generated from protobuf field: pbcommon.EnumCode code = 1;
     */
    code: EnumCode;
    /**
     * @generated from protobuf field: string msg = 2;
     */
    msg: string;
}
/**
 * @generated from protobuf message pbcommon.IdArgs
 */
export interface IdArgs {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string idStr = 2;
     */
    idStr: string;
    /**
     * @generated from protobuf field: repeated int64 ids = 3;
     */
    ids: bigint[];
    /**
     * @generated from protobuf field: repeated string idStrs = 4;
     */
    idStrs: string[];
}
/**
 * @generated from protobuf message pbcommon.PageInfo
 */
export interface PageInfo {
    /**
     * @generated from protobuf field: int32 page = 1;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 pageSize = 2;
     */
    pageSize: number;
}
/**
 * @generated from protobuf enum pbcommon.EnumCode
 */
export enum EnumCode {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * 操作成功
     *
     * @generated from protobuf enum value: Success = 200;
     */
    Success = 200,
    /**
     * 操作失败
     *
     * @generated from protobuf enum value: Fail = 500;
     */
    Fail = 500,
    /**
     * 未知错误
     *
     * @generated from protobuf enum value: Unknown = 501;
     */
    Unknown = 501,
    /**
     * 内部错误
     *
     * @generated from protobuf enum value: Internal = 502;
     */
    Internal = 502,
    /**
     * 无效数据
     *
     * @generated from protobuf enum value: Invalid = 503;
     */
    Invalid = 503,
    /**
     * 无效参数
     *
     * @generated from protobuf enum value: InvalidParam = 504;
     */
    InvalidParam = 504,
    /**
     * 参数错误
     *
     * @generated from protobuf enum value: ParamError = 505;
     */
    ParamError = 505,
    /**
     * 查询失败
     *
     * @generated from protobuf enum value: FindError = 1001;
     */
    FindError = 1001,
    /**
     * 创建失败
     *
     * @generated from protobuf enum value: CreateError = 1002;
     */
    CreateError = 1002,
    /**
     * 删除失败
     *
     * @generated from protobuf enum value: DeleteError = 1003;
     */
    DeleteError = 1003,
    /**
     * 更新失败
     *
     * @generated from protobuf enum value: UpdateError = 1004;
     */
    UpdateError = 1004,
    /**
     * auth
     *
     * 无效token
     *
     * @generated from protobuf enum value: InvalidToken = 2002;
     */
    InvalidToken = 2002,
    /**
     * 无效签名
     *
     * @generated from protobuf enum value: InvalidSign = 2003;
     */
    InvalidSign = 2003,
    /**
     * 未登录
     *
     * @generated from protobuf enum value: NotLogin = 2004;
     */
    NotLogin = 2004,
    /**
     * 登录超时
     *
     * @generated from protobuf enum value: LoginTimeout = 2005;
     */
    LoginTimeout = 2005,
    /**
     * 登录失败
     *
     * @generated from protobuf enum value: LoginError = 2006;
     */
    LoginError = 2006,
    /**
     * 登录禁止
     *
     * @generated from protobuf enum value: LoginForbidden = 2007;
     */
    LoginForbidden = 2007,
    /**
     * 登录过期
     *
     * @generated from protobuf enum value: LoginExpired = 2008;
     */
    LoginExpired = 2008,
    /**
     * 登录无效
     *
     * @generated from protobuf enum value: LoginInvalid = 2009;
     */
    LoginInvalid = 2009,
    /**
     * 登录密码错误
     *
     * @generated from protobuf enum value: LoginInvalidPassword = 2010;
     */
    LoginInvalidPassword = 2010,
    /**
     * 登录用户名错误
     *
     * @generated from protobuf enum value: LoginInvalidUsername = 2011;
     */
    LoginInvalidUsername = 2011,
    /**
     * 登录邮箱错误
     *
     * @generated from protobuf enum value: LoginInvalidEmail = 2012;
     */
    LoginInvalidEmail = 2012,
    /**
     * 登录手机号错误
     *
     * @generated from protobuf enum value: LoginInvalidPhone = 2013;
     */
    LoginInvalidPhone = 2013,
    /**
     * 登录用户名或邮箱错误
     *
     * @generated from protobuf enum value: LoginInvalidUsernameOrEmail = 2014;
     */
    LoginInvalidUsernameOrEmail = 2014
}
// @generated message type with reflection information, may provide speed optimized methods
class CommonResult$Type extends MessageType<CommonResult> {
    constructor() {
        super("pbcommon.CommonResult", [
            { no: 1, name: "code", kind: "enum", T: () => ["pbcommon.EnumCode", EnumCode] },
            { no: 2, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommonResult>): CommonResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.msg = "";
        if (value !== undefined)
            reflectionMergePartial<CommonResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommonResult): CommonResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* pbcommon.EnumCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string msg */ 2:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommonResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* pbcommon.EnumCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string msg = 2; */
        if (message.msg !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pbcommon.CommonResult
 */
export const CommonResult = new CommonResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IdArgs$Type extends MessageType<IdArgs> {
    constructor() {
        super("pbcommon.IdArgs", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "idStr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "idStrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<IdArgs>): IdArgs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.idStr = "";
        message.ids = [];
        message.idStrs = [];
        if (value !== undefined)
            reflectionMergePartial<IdArgs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IdArgs): IdArgs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string idStr */ 2:
                    message.idStr = reader.string();
                    break;
                case /* repeated int64 ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.int64().toBigInt());
                    else
                        message.ids.push(reader.int64().toBigInt());
                    break;
                case /* repeated string idStrs */ 4:
                    message.idStrs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IdArgs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string idStr = 2; */
        if (message.idStr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.idStr);
        /* repeated int64 ids = 3; */
        if (message.ids.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.int64(message.ids[i]);
            writer.join();
        }
        /* repeated string idStrs = 4; */
        for (let i = 0; i < message.idStrs.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.idStrs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pbcommon.IdArgs
 */
export const IdArgs = new IdArgs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageInfo$Type extends MessageType<PageInfo> {
    constructor() {
        super("pbcommon.PageInfo", [
            { no: 1, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "pageSize", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PageInfo>): PageInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.pageSize = 0;
        if (value !== undefined)
            reflectionMergePartial<PageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageInfo): PageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 page */ 1:
                    message.page = reader.int32();
                    break;
                case /* int32 pageSize */ 2:
                    message.pageSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).int32(message.page);
        /* int32 pageSize = 2; */
        if (message.pageSize !== 0)
            writer.tag(2, WireType.Varint).int32(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pbcommon.PageInfo
 */
export const PageInfo = new PageInfo$Type();
